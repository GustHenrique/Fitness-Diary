@page "/login"
@page "/"
@layout AutenticaLayout
@inject NavigationManager navegacao
@inject ILocalStorageService LocalStorage
@inject IUsuarioService usuarioService
@rendermode InteractiveServer

<h3>Login de Usuários</h3>

<EditForm Model="@auth" OnValidSubmit="Logar">
    <div class="container">
        <div class="form-group">
            <label for="Email">E-mail</label>
            <InputText id="Email" class="form-control" @bind-Value="auth.Email" />
        </div>

        <div class="form-group">
            <label for="Senha">Senha</label>
            <InputText id="Senha" type="password" class="form-control" @bind-Value="auth.Senha" />
        </div>

        <div>
            <button type="submit" class="btn btn-primary">Entrar</button>
        </div>

        <div class="form-group mt-2">
            <a href="/cadastroUsuario/novo">Não possui uma conta ainda? Clique aqui para se registrar!</a>
        </div>
    </div>
</EditForm>

@code {
    AutenticacaoInput auth = new AutenticacaoInput();
    private bool loginFailed = false;

    private async Task Logar()
    {
        if (ValidarForm())
        {
            var usuario = await usuarioService.AuthenticateAsync(auth.Email, auth.Senha);
            if (usuario != null)
            {
                await LocalStorage.SetItemAsync("IdUsuario", usuario.IdUsuario);
                loginFailed = false;
                navegacao.NavigateTo("/home");
            }
            else
            {
                // Falha na autenticação
                loginFailed = true;
            }
        }
    }

    private bool ValidarForm()
    {
        List<string> erros = new List<string>();

        if (string.IsNullOrWhiteSpace(auth.Email))
        {
            erros.Add("O campo E-mail é obrigatório.");
        }

        if (string.IsNullOrWhiteSpace(auth.Senha))
        {
            erros.Add("O campo Senha é obrigatório.");
        }

        if (erros.Count > 0)
        {
            return false;
        }

        return true;
    }
}
