@page "/login"
@page "/"
@layout AutenticaLayout
@inject NavigationManager navegacao
@inject ILocalStorageService localStorage
@inject IUsuarioService usuarioService
@inject SweetAlertService Swal
@rendermode InteractiveServer


<Loading IsLoading="isLoading" />
<div class="container-fluid">
    <div class="container ">
        <div class="row justify-content-center">
            <div class=" col-12 col-sm-12 col-md-8 col-lg-6 col-xl-6">
            <div class="heading_container">
                    <h3>Login de Usuários</h3>
            </div>
            <div class="form_container">
                <EditForm Model="@auth" OnValidSubmit="Logar">
                        <div class="form-group">
                            <label for="Email">E-mail</label>
                            <InputText id="Email" class="form-control" @bind-Value="auth.Email" />
                        </div>

                        <div class="form-group">
                            <label for="Senha">Senha</label>
                            <InputText id="Senha" type="password" class="form-control" @bind-Value="auth.Senha" />
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Entrar</button>
                        </div>

                        <div class="form-group mt-3 text-center">
                            <p @onclick="IrParaCadastro">Não possui uma conta ainda? <br> <Span> Clique aqui para se registrar!</Span></p>
                        </div>
                </EditForm>

            </div>
        </div>
    </div>
   </div>
    </div>



@code {
    AutenticacaoInput auth = new AutenticacaoInput();
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        localStorage.ClearAsync();
    }

    private async Task Logar()
    {
        isLoading = true;
        StateHasChanged();

        if (await ValidarForm())
        {
            var usuario = await usuarioService.AuthenticateAsync(auth.Email, auth.Senha);
            if (usuario != null)
            {
                await localStorage.SetItemAsync("IdUsuario", usuario.IdUsuario);
                navegacao.NavigateTo("/home");
            }
            else
            {
                isLoading = false;
                StateHasChanged();

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Falha no login",
                        Text = $"Email ou senha incorretos!",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Tentar novamente!",
                    });
            }
        }

    }

    private void IrParaCadastro()
    {
        navegacao.NavigateTo("/cadastroUsuario/novo", true);
    }

    private async Task<bool> ValidarForm()
    {
        List<string> erros = new List<string>();

        if (string.IsNullOrWhiteSpace(auth.Email))
        {
            erros.Add("O campo E-mail é obrigatório.");
        }

        if (string.IsNullOrWhiteSpace(auth.Senha))
        {
            erros.Add("O campo Senha é obrigatório.");
        }

        if (erros.Count > 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Erro",
                    Text = $"Erros: \r\n {string.Join(" \r\n ", erros)}!",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Tentar novamente!",
                });

            return false;
        }

        return true;
    }
}
