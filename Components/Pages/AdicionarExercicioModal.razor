@page "/exercicio"
@using Blazorise
@inject IGrupoMuscularService gruposMuscularesService
@inject SweetAlertService Swal

<style>
    .corTexto {
        color: black;
    }

</style>

<div class="modal fade @((Visible ? "show" : ""))" tabindex="-1" role="dialog" style="display:@(Visible ? "block" : "none");">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title corTexto">Adicionar Novo Exercício</h5>
            </div>
            <div class="modal-body">
                <EditForm Model="@NovoExercicio" OnValidSubmit="SalvarExercicio">
                    <div class="form-group">
                        <label for="NomeExercicio" class="corTexto">Nome do Exercício</label>
                        <InputText id="NomeExercicio" class="form-control" @bind-Value="NovoExercicio.Nome" />
                    </div>

                    <div class="form-group">
                        <label for="Repeticoes" class="corTexto">Repetições</label>
                        <InputNumber id="Repeticoes" class="form-control" @bind-Value="NovoExercicio.Repeticoes" />
                    </div>

                    <div class="form-group">
                        <label for="Series" class="corTexto">Quantidade de séries</label>
                        <InputNumber id="Series" class="form-control" @bind-Value="NovoExercicio.Series" />
                    </div>

                    <div class="form-group">
                        <label for="CaloriasQueimadasPorSeries" class="corTexto">Calorias Queimadas Por Série</label>
                        <InputNumber id="CaloriasQueimadasPorSeries" class="form-control" @bind-Value="NovoExercicio.CaloriasQueimadasPorSeries" />
                    </div>

                    <div class="form-group">
                        <label for="Peso" class="corTexto">Peso (kg)</label>
                        <InputNumber id="Peso" class="form-control" @bind-Value="NovoExercicio.Peso" />
                    </div>

                    <div class="form-group">
                        <label for="GrupoMuscular" class="corTexto">Grupo Muscular</label>
                        <InputSelect id="GrupoMuscular" class="form-control" @bind-Value="NovoExercicio.IdGrupoMuscular">
                            <option value="">Selecione...</option>
                            @foreach (var grupo in GruposMusculares)
                            {
                                <option value="@grupo.IdGrupoMuscular">@grupo.Nome</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-group">
                        <Button Color="Color.Primary" Type="ButtonType.Submit">Salvar</Button>
                        <Button Color="Color.Secondary" @onclick="Cancelar">Cancelar</Button>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <Button Color="Color.Secondary" @onclick="Cancelar">Fechar</Button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Exercicio NovoExercicio { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public Treino Treino { get; set; }

    private List<GrupoMuscular> GruposMusculares = new List<GrupoMuscular>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GruposMusculares = await ObterGruposMusculares();
            StateHasChanged();
        }
    }

    private async Task<List<GrupoMuscular>> ObterGruposMusculares()
    {
        return await gruposMuscularesService.GetGrupoMuscularAsync();
    }

    private async Task<bool> ValidarForm()
    {
        List<string> erros = new List<string>();

        if (string.IsNullOrEmpty(NovoExercicio.Nome))
            erros.Add("Nome do exercicio obrigatório!");
        else if (NovoExercicio.Repeticoes == 0)
            erros.Add("Quantidade de repetições do exercicio obrigatório!");
        else if (NovoExercicio.Series == 0)
            erros.Add("Quantidade de series do exercicio obrigatório!");

        if (erros.Count > 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Erro",
                    Text = $"Erros: \r\n {string.Join(" \r\n ", erros)}!",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Tentar novamente!",
                });

            return false;
        }

        return true;
    }

    private async void SalvarExercicio()
    {
        if (await ValidarForm())
        {
            if (NovoExercicio.IdExercicio == 0)
            {
                NovoExercicio.IdExercicio = Treino.Exercicios.Count() + 1;
            }
            OnSave.InvokeAsync();
            Visible = false;
        }
    }

    private void Cancelar()
    {
        Visible = false;
        OnClose.InvokeAsync();
    }
}
