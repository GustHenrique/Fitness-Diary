@page "/treinos"
@inject IUsuarioService clienteService
@inject NavigationManager navegacao
@inject ITreinoService treinoService
@inject ILocalStorageService localStorage
@inject SweetAlertService Swal
@rendermode InteractiveServer


<Loading IsLoading="isLoading" />

<div class="container">
    <div class="heading_container">
        <h2>Meus Treinos</h2>
    </div>
    <div class="row">
        <div class="container">
            @if (treinos == null || treinos.Count == 0)
            {
                <p class="text-center">Nenhum treino cadastrado.</p>
            }
            else
            {
                <ul class="list-group">
                    @foreach (var treino in treinos)
                    {
                        <li class="list-group-item">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@treino.Nome</strong> <br />
                                    <small>Categoria: @treino.Categoria?.Nome</small> <br />
                                    <small>Duração: @treino.Duracao minutos</small> <br />
                                    <small>Calorias Queimadas: @CalcularCaloriasTotais(treino) Calorias</small>
                                </div>
                                <div class="d-flex align-items-center">
                                    <button class="btn btn-link d-flex align-items-center" @onclick="() => ToggleExercicios(treino.IdTreino)">
                                        @if (exibirExercicios.ContainsKey(treino.IdTreino) && exibirExercicios[treino.IdTreino])
                                        {
                                            <span>Esconder Exercícios</span>
                                        }
                                        else
                                        {
                                            <span>Mostrar Exercícios</span>
                                        }
                                    </button>
                                    <button class="btn btn-link d-flex align-items-center" @onclick="() => EditarTreino(treino)">
                                        <span class="ms-2">Editar</span>
                                    </button>
                                    <button class="btn btn-link d-flex align-items-center" @onclick="() => ExcluirTreino(treino)">
                                        <span class="ms-2">Excluir</span>
                                    </button>
                                </div>
                            </div>


                            @if (exibirExercicios.ContainsKey(treino.IdTreino) && exibirExercicios[treino.IdTreino])
                            {
                                <div class="mt-2">
                                    @if (treino.Exercicios == null || treino.Exercicios.Count == 0)
                                    {
                                        <p>Nenhum exercício cadastrado para este treino.</p>
                                    }
                                    else
                                    {
                                        <ul class="list-group list-group-flush">
                                            @foreach (var exercicio in treino.Exercicios)
                                            {
                                                <li class="list-group-item">
                                                    <strong>@exercicio.Nome</strong> <br />
                                                    <small>Repetições: @exercicio.Repeticoes</small> <br />
                                                    <small>Séries: @exercicio.Series</small> <br />
                                                    <small>Peso: @exercicio.Peso kg</small> <br />
                                                    <small>Grupo Muscular: @exercicio.GrupoMuscular?.Nome</small>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            }
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    public int IdUsuario { get; set; }
    private List<Treino> treinos = new List<Treino>();
    private Dictionary<int, bool> exibirExercicios = new Dictionary<int, bool>();
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await localStorage.GetItemAsync<int>("IdUsuario") == null || await localStorage.GetItemAsync<int>("IdUsuario") == 0)
            {
                navegacao.NavigateTo($"/");
            }

            isLoading = true;
            StateHasChanged();

            IdUsuario = await localStorage.GetItemAsync<int>("IdUsuario");
            treinos = await ObterTreinos();

            isLoading = false;
            StateHasChanged();
        }
    }

    private void EditarTreino(Treino treino)
    {
        if (treino is not null)
        {
            navegacao.NavigateTo($"/cadastroTreino/editar/{treino.IdTreino}", true);
        }
    }

    private async void ExcluirTreino(Treino treino)
    {
        if (treino is not null)
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Excluir Treino",
                    Text = $"Deseja mesmo excluir o treino {treino.Nome} ? O processo é irreversível!",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Excluir treino!",
                });

            if (result.IsConfirmed)
            {
                await treinoService.DeleteTreinoAsync(treino);
                treinos = await ObterTreinos();
                StateHasChanged();
            }
        }
    }

    private void ToggleExercicios(int idTreino)
    {
        if (exibirExercicios.ContainsKey(idTreino))
        {
            exibirExercicios[idTreino] = !exibirExercicios[idTreino];
        }
        else
        {
            exibirExercicios[idTreino] = true;
        }
    }

    private double CalcularCaloriasTotais(Treino treino)
    {
        return treino.Exercicios?.Sum(e => e.CaloriasQueimadasPorSeries * e.Series) ?? 0;
    }

    private async Task<List<Treino>> ObterTreinos()
    {
        return await treinoService.GetTreinosByUsuarioIdAsync(IdUsuario);
    }
}
