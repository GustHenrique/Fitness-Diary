@layout CadastroLayout﻿
@page "/cadastroUsuario/editar/{IdUsuario:int}"
@page "/cadastroUsuario/novo"
@using FitnessDiary.Components.Layout
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IUsuarioService usuarioService
@inject SweetAlertService Swal
@inject NavigationManager navegacao
@rendermode InteractiveServer


<div class="container-fluid">
    <div class="row">
        <div class="col-md-6 px-0">
            <div class="img-box">
                <img src="images/contact-img.jpg" alt="">
            </div>
        </div>
        <div class="col-lg-5 col-md-6">
            <div class="heading_container">
                    <h3>Registro de Usuarios</h3>
            </div>
            <div class="form_container pr-0 pr-lg-5 mr-0 mr-lg-2">
                <EditForm Model="@usuario" OnValidSubmit="Salvar">
                    <div class="container">
                        <div class="form-group">
                            <label>E-mail</label>
                            <InputText id="Email" class="form-control" @bind-Value="usuario.Email" />
                        </div>

                        <div class="form-group">
                            <label>Senha</label>
                            <InputText id="Senha" type="password" class="form-control" @bind-Value="usuario.Senha" />
                        </div>

                        <div class="form-group">
                            <label>Repetir Senha</label>
                            <InputText id="repetirSenha" type="password" class="form-control" @bind-Value="repetirSenha" />
                        </div>

                        <div class="form-group">
                            <label>Primeiro nome</label>
                            <InputText id="Nome" class="form-control" @bind-Value="usuario.Nome" />
                        </div>

                        <div class="form-group">
                            <label>Data de Nascimento</label>
                            <InputDate id="DtaNascimento" class="form-control" @bind-Value="usuario.DtaNascimento" />
                        </div>

                        <div class="form-group">
                            <label>Peso</label>
                            <InputNumber id="peso" class="form-control" @bind-Value="usuario.Peso" />
                        </div>

                        <div class="form-group">
                            <label>Altura</label>
                            <InputNumber id="altura" class="form-control" @bind-Value="usuario.Altura" />
                        </div>

                        <div>
                            <button type="submit" class="btn btn-primary"> Salvar</button>
                        </div>

                        <div class="form-group">
                            <a href="/">
                                <label>Já uma conta ainda ? Clique aqui entrar!</label>
                            </a>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int IdUsuario { get; set; }
    private string repetirSenha = "";
    private Usuario usuario = new Usuario();

    private async Task<bool> ValidarForm()
    {
        List<string> erros = new List<string>();
        erros.AddRange(PasswordStrength(usuario.Senha));
        erros.AddRange(CamposObrigatorios());
        erros.AddRange(PasswordMatch());

        Usuario existeEmailCadastrado = await usuarioService.GetUsuarioByEmailAsync(usuario.Email);
        if (existeEmailCadastrado != null)
            erros.Add("Email já cadastrado!");

        if(erros.Count > 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Erro",
                    Text = $"Erros: \r\n {string.Join(" \r\n ", erros)}!",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Tentar novamente!",
                });

            return false;
        }

        return true;
    }

    private List<string> PasswordStrength(string pw)
    {
        List<string> erros = new List<string>();

        if (string.IsNullOrWhiteSpace(pw))
        {
            erros.Add("Senha é obrigatória!");
        }
        else if (pw.Length < 8)
            erros.Add("A senha precisa ter ao menos 8 caracteres");
        else if (!Regex.IsMatch(pw, @"[A-Z]"))
            erros.Add("A senha deve ter pelo menos uma letra maiuscula");
        else if (!Regex.IsMatch(pw, @"[a-z]"))
            erros.Add("A senha deve ter pelo menos uma letra minuscula");
        else if (!Regex.IsMatch(pw, @"[0-9]"))
            erros.Add("A senha deve ter pelo menos um número");

        return erros;
    }

    private List<string> CamposObrigatorios()
    {
        List<string> erros = new List<string>();

        if (string.IsNullOrWhiteSpace(usuario.Nome))
        {
            erros.Add("O nome do usuário é obrigatório");
        }
        else if (!IsDataValida(usuario.DtaNascimento))
            erros.Add("A data de nascimento precisa ser válida");

        return erros;
    }
    private List<string> PasswordMatch()
    {
        List<string> erros = new List<string>();
        if (repetirSenha != usuario.Senha)
            erros.Add("As senhas não conferem");

        return erros;
    }


    private bool IsDataValida(DateTime? dataNascimento)
    {
        if (dataNascimento == null)
        {
            return false; // Data é nula, portanto inválida
        }

        DateTime data = dataNascimento.Value;

        return data >= new DateTime(1900, 1, 1) && data <= DateTime.Today;
    }

    private async Task Salvar()
    {
        if (await ValidarForm())
        {
            if (IdUsuario == 0)
            {
                await usuarioService.AddUsuarioAsync(usuario);

            }
            else
            {
                await usuarioService.UpdateUsuarioAsync(usuario);
            }

            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Cadastrado",
                    Text = "Usuário Cadastrado com sucesso!",
                    Icon = SweetAlertIcon.Success,
                    ConfirmButtonText = "Ok, ir para login!"
                });

            if (result.IsConfirmed)
            {
                navegacao.NavigateTo("/");
            }
        }
    }

}